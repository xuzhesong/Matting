% Function to compute alpha matte
function alpha_matte = compute_alpha_matte(U_rgb, F_mean, F_covariance, B_mean, B_covariance)
    [height, width, ~] = size(U_rgb);
    alpha_matte = zeros(height, width);
    % Define the iteration parameter
    Iteration = 10;
    % Define the original variance 
    oriVar = 8;
    
    for h = 1:height
        for w = 1:width
            if nnz(U_rgb(h, w, :)) > 0
                % Initialize alpha to some initial value
                alpha = 0.5; % You can use any reasonable initial value
                
                % Iterate to refine alpha
                for iter = 1:Iteration
                    % Compute the terms needed for the linear system
                    UL = F_covariance + eye(3)*(alpha^2)/(oriVar^2);
                    UR = eye(3)*alpha*(1-alpha)/(oriVar^2);
                    DL = eye(3)*alpha*(1-alpha)/(oriVar^2);
                    DR = B_covariance + eye(3)*((1-alpha)^2)/(oriVar^2);
                    
                    % Construct the coefficient matrix A and the right-hand side vector B
                    A = [UL, UR; DL, DR];
                    C = reshape(U_rgb(h, w, :), 3, 1);
                    BU = F_covariance * F_mean' + C * alpha/(oriVar^2);
                    BD = B_covariance * B_mean' + C * (1-alpha)/(oriVar^2);
                    B = [BU; BD];
                    
                    % Solve the linear system to find the new alpha
                    x = A \ B;
                    tempF = x(1:3);
                    tempB = x(4:6);
                    alpha = dot((C - tempB), (tempF - tempB)) / norm(tempF - tempB)^2;
                end
                
                % Update alpha_matte with the final alpha value
                alpha_matte(h, w) = alpha;
                unknownAlpha = compute_alpha_matte(U_rgb, F_mean, F_covariance, B_mean, B_covariance);
                imshow(uint8(unknownAlpha));
